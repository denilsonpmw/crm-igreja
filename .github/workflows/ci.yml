name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-build:
    name: Lint, build e testes do frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build TypeScript
        run: npm run build
      - name: Run lint
        run: npx eslint src --ext .ts
      - name: TypeScript check
        run: npm run build
      - name: Run frontend tests
        working-directory: frontend
        run: npm ci && npm test -- --watchAll=false

  test-with-postgres:
    name: Testes backend (Postgres)
    runs-on: ubuntu-latest
    needs: lint-and-build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 12
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build TypeScript
        run: npm run build
      - name: Wait for Postgres to be ready
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            echo "Waiting for Postgres... ($i/30)"
            sleep 2
          done
      - name: Run backend tests with coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/crm_test
          CI: true
        run: npm run test:coverage

      - name: Upload coverage to Codecov (opcional)
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
